{"version":3,"sources":["Button/Button.js","Navbar/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize","to","className","Navbar","walletAddress","setWalletAddress","useEthers","activateBrowserWallet","account","etherBalance","useEtherBalance","useEffect","classname","variant","size","color","disableElevation","parseFloat","formatEther","toFixed","slice","App","useState","showMessage","setMessage","setTimeout","title","height","width","frameborder","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","DAppProvider","config","document","getElementById"],"mappings":"sQAIMA,EAAS,CAAC,eAAgB,eAAgB,aAE1CC,EAAQ,CAAC,cAAe,cAEjBC,EAAS,SAAC,GAMhB,IALLC,EAKI,EALJA,SACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,WAEMC,EAAmBR,EAAOS,SAASH,GACrCA,EACAN,EAAO,GAELU,EAAkBT,EAAMQ,SAASF,GAAcA,EAAaN,EAAM,GAExE,OACE,cAAC,IAAD,CAAMU,GAAG,IAAIC,UAAU,aAAvB,SACE,wBACEA,UAAS,cAASJ,EAAT,YAA6BE,GACtCL,QAASA,EACTD,KAAMA,EAHR,SAKGD,O,kCC+BMU,MApDf,YAAsD,IAApCC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,iBAC/B,EAA2CC,cAAnCC,EAAR,EAAQA,sBAAuBC,EAA/B,EAA+BA,QACzBC,EAAeC,YAAgBF,GAWrC,OALAG,qBAAU,WACRN,EAAiBG,KAChB,CAACA,EAASH,IAIX,qCACE,qBAAKH,UAAU,SAAf,SACE,qBAAKA,UAAU,mBAAf,SACE,qBAAKA,UAAU,eAAf,SACGE,GAAiBK,EAChB,eAAC,EAAD,CACEb,YAAY,eACZgB,UAAU,qBACVC,QAAQ,YACRC,KAAK,QACLC,MAAM,UACNC,kBAAgB,EANlB,UAQE,sBAAMd,UAAU,cAAhB,mBAAkCe,WAChCC,YAAYT,IACZU,QAAQ,GAFV,UAGA,sBAAMjB,UAAU,iBAAhB,mBAAqCE,EAAcgB,MACjD,EACA,GAFF,cAGOhB,EAAcgB,OAAO,SAG9B,eAAC,EAAD,CAAQzB,QAhCQ,WAC1BY,KA+BgDX,YAAY,eAAeiB,QAAQ,YAAYC,KAAK,QAAQC,MAAM,UAAxG,UACE,2CADF,IACuB,cAAC,IAAD,CAAMd,GAAG,eAQxC,oBAAIC,UAAW,QAAf,yBCvBSmB,MAxBf,WACE,MAA0CC,mBAAS,IAAnD,mBAAOlB,EAAP,KAAsBC,EAAtB,KACA,EAAkCiB,oBAAS,GAA3C,mBAAOC,EAAP,KAAoBC,EAApB,KAMA,OACE,cAAC,IAAD,UACE,sBAAKtB,UAAU,MAAf,UACE,cAAC,EAAD,CAAQE,cAAeA,EAAeC,iBAAkBA,IACxD,yBAAQH,UAAU,aAAlB,UACEqB,GAAe,sBAAMrB,UAAU,cAAhB,kCACf,qBAAKA,UAAU,OAAf,SACE,cAAC,EAAD,CAASP,QAXS,YACR,IAAd4B,IAAsBC,GAAW,GAAOC,YAAW,WAAOD,GAAW,KAAS,OAU1E,SAAuC,4CAEzC,wBAAQE,MAAM,OAAOC,OAAO,MAAMC,MAAM,MAAOC,YAAY,IAAKC,IAAI,6FAApE,wBCVKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAcC,OAAQ,GAAtB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.df7b23e7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst STYLES = ['btn--primary', 'btn--outline', 'btn--test'];\r\n\r\nconst SIZES = ['btn--medium', 'btn--large'];\r\n\r\nexport const Button = ({\r\n  children,\r\n  type,\r\n  onClick,\r\n  buttonStyle,\r\n  buttonSize\r\n}) => {\r\n  const checkButtonStyle = STYLES.includes(buttonStyle)\r\n    ? buttonStyle\r\n    : STYLES[0];\r\n\r\n  const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0];\r\n\r\n  return (\r\n    <Link to='/' className='btn-mobile'>\r\n      <button\r\n        className={`btn ${checkButtonStyle} ${checkButtonSize}`}\r\n        onClick={onClick}\r\n        type={type}\r\n      >\r\n        {children}\r\n      </button>\r\n    </Link>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button } from '../Button/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navbar.css';\r\nimport { useEthers, useEtherBalance } from '@usedapp/core';\r\nimport { formatEther } from '@ethersproject/units';\r\n\r\nfunction Navbar({ walletAddress, setWalletAddress }) {\r\n  const { activateBrowserWallet, account } = useEthers();\r\n  const etherBalance = useEtherBalance(account);\r\n\r\n  const handleConnectWallet = () => {\r\n    activateBrowserWallet();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setWalletAddress(account);\r\n  }, [account, setWalletAddress]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <nav className='navbar'>\r\n        <div className='navbar-container'>   \r\n          <div className='walletButton'>\r\n            {walletAddress && etherBalance ? (\r\n              <Button\r\n                buttonStyle='btn--outline'\r\n                classname='wallet-info-button'\r\n                variant='contained'\r\n                size='large'\r\n                color='primary'\r\n                disableElevation\r\n              >\r\n                <span className='eth-balance'>{`${parseFloat(\r\n                  formatEther(etherBalance)\r\n                ).toFixed(4)} ETH`}</span>\r\n                <span className='wallet-address'>{`${walletAddress.slice(\r\n                  0,\r\n                  5\r\n                )}...${walletAddress.slice(-4)}`}</span>\r\n              </Button>\r\n            ) : (\r\n              <Button onClick={handleConnectWallet} buttonStyle='btn--outline' variant='contained' size='large' color='primary'>\r\n                <span>Connect</span> <Link to='/' />\r\n              </Button>\r\n            )}\r\n          </div>\r\n    \r\n          {/* {button && <Button buttonStyle='btn--outline'>Connect</Button>} */}\r\n        </div>\r\n      </nav>\r\n      <h1 className= 'title'>\r\n        NFTurks\r\n      </h1>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import './App.css';\r\nimport React, {useState} from 'react';\r\nimport Navbar from './Navbar/Navbar';\r\nimport { Button } from './Button/Button'\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nfunction App() {\r\n  const [walletAddress, setWalletAddress] = useState('')\r\n  const [showMessage, setMessage] = useState(false)\r\n\r\n  const showMessageFunction = () => {\r\n    if (showMessage===false) {setMessage(true); setTimeout(() => {setMessage(false)}, 2000);;}\r\n  }\r\n  \r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Navbar walletAddress={walletAddress} setWalletAddress={setWalletAddress}/>\r\n        <header className=\"App-header\">\r\n        { showMessage && <span className=\"mintMessage\">Mint is not avaiable</span>}\r\n          <div className='mint'>\r\n            <Button  onClick={showMessageFunction}><span>Mint</span></Button>\r\n          </div>\r\n          <iframe title=\"Turk\" height='500' width='500'  frameborder=\"0\"  src=\"https://sketchfab.com/models/02f3b844a948482d80518e3803d79a2b/embed?autospin=1&autostart=1\"> </iframe>\r\n        </header>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { DAppProvider } from '@usedapp/core';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DAppProvider config={{}}>\r\n      <App />\r\n    </DAppProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}